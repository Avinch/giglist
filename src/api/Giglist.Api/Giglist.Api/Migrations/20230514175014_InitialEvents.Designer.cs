// <auto-generated />
using System;
using Giglist.Api.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giglist.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230514175014_InitialEvents")]
    partial class InitialEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giglist.Api.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92fabf6c-ed9c-4291-b9ed-115855925493"),
                            Name = "Ev 1",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Subtitle = "One",
                            VenueId = new Guid("f7908ef4-89fb-4822-b984-86869f4e45ee")
                        },
                        new
                        {
                            Id = new Guid("68d95b5e-b41d-4f8c-89a6-1cbc34c7564f"),
                            Name = "Ev 2",
                            StartDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Subtitle = "Two",
                            VenueId = new Guid("fa73c367-a28e-4548-a427-8186a2b7b0d3")
                        },
                        new
                        {
                            Id = new Guid("48455b22-b799-400e-a13a-7165860f79ef"),
                            Name = "Ev 3",
                            StartDate = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Subtitle = "Three",
                            VenueId = new Guid("42fc5d09-0e5b-4073-a58c-5a68ef47173e")
                        },
                        new
                        {
                            Id = new Guid("809dcb32-53db-46fc-a3c2-323cab66b05b"),
                            Name = "Ev 4",
                            StartDate = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Subtitle = "Four",
                            VenueId = new Guid("12bb42c3-94b0-49c6-919d-53a3ace9d7ac")
                        });
                });

            modelBuilder.Entity("Giglist.Api.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7908ef4-89fb-4822-b984-86869f4e45ee"),
                            City = "Leeds",
                            Name = "First Direct Arena",
                            SearchName = "firstdirectarena"
                        },
                        new
                        {
                            Id = new Guid("42fc5d09-0e5b-4073-a58c-5a68ef47173e"),
                            City = "Leeds",
                            Name = "O2 Academy Leeds",
                            SearchName = "o2academyleeds"
                        },
                        new
                        {
                            Id = new Guid("12bb42c3-94b0-49c6-919d-53a3ace9d7ac"),
                            City = "London",
                            Name = "O2 Arena",
                            SearchName = "o2arena"
                        },
                        new
                        {
                            Id = new Guid("fa73c367-a28e-4548-a427-8186a2b7b0d3"),
                            City = "Manchester",
                            Name = "New Century Hall",
                            SearchName = "newcenturyhall"
                        });
                });

            modelBuilder.Entity("Giglist.Api.Models.Event", b =>
                {
                    b.HasOne("Giglist.Api.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Giglist.Api.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
